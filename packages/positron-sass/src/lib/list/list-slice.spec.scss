@import "../assert";
@import "list-slice";

@include assert("list-slice: returns a portion of a list selected from begin to end (end not included)", (
    list-slice((1, 2, 3)) equal (1, 2, 3),
    list-slice((1, 2, 3), 1) equal (1, 2, 3),
    list-slice((1, 2, 3), 2) equal (2, 3),
    list-slice((1, 2, 3), 1, 2) equal (1,),
    list-slice((1, 2, 3), 1, 3) equal (1, 2),
    list-slice((1, 2, 3), 2, 3) equal (2,)
));

@include assert("list-slice: should support negative start / end", (
    list-slice((1, 2, 3), -1) equal (3,),
    list-slice((1, 2, 3), -2) equal (2, 3),
    list-slice((1, 2, 3), -3, -2) equal (1,),
    list-slice((1, 2, 3), -1, -1) equal (()),
    list-slice((1, 2, 3), 1, -1) equal (1, 2)
));

@include assert("list-slice: should support out of range start / end", (
    list-slice((), 1) equal (),
    list-slice((), -1, 1) equal (),
    list-slice((1, 2, 3), 0) equal (1, 2, 3),
    list-slice((1, 2, 3), 0, 0) equal (),
    list-slice((1, 2, 3), 0, 100) equal (1, 2, 3),
));

@include assert("list-slice: should throw TypeError if invalid params passed", (
    (list-slice, 1) throws "TypeError: Expected argument `$list` of `list-slice()` to be a list, instead received (number) 1",
    (list-slice, (), foo) throws "TypeError: Expected argument `$from` of `list-slice()` to be a <optional number>, instead received (string) foo",
    (list-slice, (), 1, foo) throws "TypeError: Expected argument `$to` of `list-slice()` to be a <optional number>, instead received (string) foo",
));