@import "../expect";
@import "./is-type-of";

@function --is-type-of-arg-list($args...) {
    @return $args;
}

@include describe(is-type-of) {
    @include describe("function") {
        @include it("should return true if the passed value is a function", (
            is-type-of(function, call) true,
            is-type-of(function, is-type-of) true,
        ));
    }

    @include describe("callable") {
        @include it("should return true if the passed value can be called with func-call", (
            is-type-of(callable, call) true,
            is-type-of(callable, is-type-of) true,
            is-type-of(callable, (is-type-of, 1)) true,
            is-type-of(callable, ((is-type-of, 1), 1)) true,
        ));
    }

    @include describe("list") {
        @include it("should return true if the passed value is a list / arglist", (
            is-type-of(list, ()) true,
            is-type-of(list, (1, 2, 3)) true,
            is-type-of(list, --is-type-of-arg-list()) true,
            is-type-of(list, --is-type-of-arg-list(1, 2, 3)) true,
        ));
    }

    @include describe("arglist") {
        @include it("should return true if the passed value is an arglist", (
            is-type-of(arglist, --is-type-of-arg-list()) true,
            is-type-of(arglist, --is-type-of-arg-list(1, 2, 3)) true,
        ));

        @include it("should return false if the passed value is a list", (
            is-type-of(arglist, ()) false,
            is-type-of(arglist, (1, 2, 3)) false,
        ));
    }

    @include describe("map") {
        @include it("should return true if the passed value is a map or an empty list or arglist", (
            is-type-of(map, ()) true,
            is-type-of(map, --is-type-of-arg-list()) true,
            is-type-of(map, (foo: 1)) true,
        ));
    }

    @include describe("string, number, boolean") {
        @include it("should return true if the passed arg is a value of the specified type", (
            is-type-of(string, "") true,
            is-type-of(number, 1) true,
            is-type-of(bool, true) true,
            is-type-of(bool, false) true,
        ));
    }

    @include describe("null") {
        @include it("should return true if the passed value is null", (
            is-type-of("null", null) true,
            is-type-of(null, null) true,
        ));
    }

    @include describe("type") {
        $type: type("is-string");

        @include it("should return true if the passed value is one internal types", (
            is-type-of("type", "arglist") true,
            is-type-of("type", "bool") true,
            is-type-of("type", "function") true,
            is-type-of("type", "list") true,
            is-type-of("type", "map") true,
            is-type-of("type", "number") true,
            is-type-of("type", "null") true,
            is-type-of("type", "string") true,
        ));

        @include it("should return true if the passed value is 'callable'", (
            is-type-of("type", "callable") true,
        ));

        @include it("should return true if the passed value is 'type'", (
            is-type-of("type", "type") true,
        ));

        @include it("should return true if the passed value is an instance of type", (
            is-type-of("type", $type) true,
        ));

        @include it("should return true if the passed value is a list of types", (
            is-type-of("type", ("string", "number", "type")) true,
        ));

        @include it("should return true if the passed value is a map of types", (
            is-type-of("type", (foo: "string", bar: "number", ted: "type")) true,
        ));
    }

    @include describe("list of types") {
        @include it("should return true if all items of the specfied list matches corresponding types", (
            is-type-of((string,), ("",)) true,
            is-type-of((string, number), ("", 1)) true,
            is-type-of((string, number, list), ("", 1, ())) true,
            is-type-of((string, number, (bool, function)), ("", 1, (true, is-type-of))) true,
            is-type-of((null, null), ()) true,
        ));

        @include it("should return true if the passed types is empty and the given value is any list", (
            is-type-of((), ()) true,
            is-type-of((), (1, 2)) true,
            is-type-of((), --is-type-of-arg-list()) true,
            is-type-of((), --is-type-of-arg-list(1, 2, 3)) true,
        ));
    }

    @include describe("map of types") {
        @include it("should return true if all props of the specfied map matches corresponding types", (
            is-type-of((foo: string), (foo: "")) true,
            is-type-of((foo: string), (foo: 1)) false,
            is-type-of((foo: string), (foo: "", bar: 2)) true,

            is-type-of((foo: string, bar: number), (foo: "", bar: 1)) true,
            is-type-of((foo: string, bar: null), (foo: "")) true,
        ));
    }
}