@import "../constructor/is-constructor";
@import "../constructor/instance-of--";
@import "../core/const--";
@import "../core/global";
@import "../list/list-every--";
@import "../map/map-every--";
@import "type--";
@import "is-list";
@import "is-map";

/// The `is-type()` function determines whether the passed value is a type
/// @group types
///
/// @param { opt(any) } $value [null]
/// @return { bool }
///
/// @example
///
///    @debug is-type(number) // true
///    @debug is-type(number(px)) // true
///    @debug is-type((number, string)) // true
///
@function is-type($value: null, $other...) {
    $types: (
        "any",
        "arglist",
        "bool",
        "callable",
        "constructor",
        "function",
        "list",
        "map",
        "number",
        "null",
        "string",
        "type",
        "unit"
    );

    @return $value == null
        or (type-of($value) == "string" and (index($types, $value) != null or is-constructor($value)))
        or (is-map($value) and (instance-of--($value, global(type)) or map-every--($value, is-type)))
        or (is-list($value) and list-every--($value, is-type));
}