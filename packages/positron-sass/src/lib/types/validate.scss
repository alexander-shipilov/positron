@import "../core/is-function";
@import "../core/is-list";
@import "../core/throw-type-error";

@import "./is-type-of";
@import "./map-of";
@import "./optional";

/// @access private
/// @group types
@function --validate($args, $func: null) {
    $error: null;

    @each $arg, $type-value in $args {
        $type: nth($type-value, 1);
        $value: nth($type-value, 2);
        $is-type-of: is-type-of($type, $value);

        @debug --validate, $func, to-string($type), to-string($value) $is-type-of;

        @if (not $is-type-of) {
            @return throw-type-error(if($func == null, $arg, $func $arg), $type, $value) == null;
        }
    }

    @return true;
}


/// Validates function arguments
/// @group types
///
/// @param { map-of(type any) } $args map of arguments to check
/// @param { string } $func = null
/// @return { bool }
///
/// @throws type error
///
/// @example
///
///     //
///     // expect
///     // $arg1: a map with shape (bar: string, ted: number | null)
///     // $arg2: a list of strings
///     //
///     @function foo($arg1, $arg2...) {
///         $valid: validate((arg1: (bar: string, ted: optional(number)) $arg1, arg2: list-of(string) $arg2), foo);
///
///         @if ($valid) {
///             // do something
///         } @else {
///             @return null;
///         }
///     }
///
@function validate($args, $func: null, $other...) {
    $valid-args: --validate((args: map-of(type any) $args, func: optional(string) $func), validate);

    @return if($valid-args, --validate($args, $func), null);
}