@import "../constructor/is-constructor";
@import "../constructor/instance-of--";
@import "../core/throw-type-error";
@import "../func/func-call--";
@import "../list/list-every--";
@import "../map/map-every--";
@import "is-callable";
@import "is-function";
@import "is-list";
@import "is-map";
@import "is-type";
@import "is-valid--";
@import "type--";

/// @group types
/// @access private
@function --is-type-of--is-list($type, $value, $other...) {
    $type-length: length($type);
    $is-type-of: is-list($value);

    @if ($is-type-of and $type-length != 0) {
        $value-length: length($value);

        $index: 1;
        @while ($is-type-of and $index <= $type-length) {
            $nth-type: nth($type, $index);
            $nth-value: if($index <= $value-length, nth($value, $index), null);
            $is-type-of: func-call--(is-type-of, $nth-type, $nth-value);

            $index: $index + 1;
        }
    }

    @return $is-type-of;
}

/// @group types
/// @access private
@function --is-type-of--is-map($type, $value, $other...) {
    $type-length: length($type);
    $is-type-of: is-map($value);

    @if ($is-type-of and $type-length != 0) {
        $value-length: length($value);

        $index: 1;
        @while ($is-type-of and $index <= $type-length) {
            $nth-type: nth($type, $index);
            $is-type-of: func-call--(is-type-of, nth($nth-type, 2), map-get($value, nth($nth-type, 1)));
            $index: $index + 1;
        }
    }

    @return $is-type-of;
}

@function is-type-of($type, $value, $other...) {
    $is-type-of: null;

    @if (not is-type($type)) {
        @return throw-type-error(is-type-of type, "type", $type);
    }

    @if ($type == "any") {
        $is-type-of: $value != null;
    } @else if ($type == "type") {
        $is-type-of: is-type($value);
    } @else if ($type == "map") {
        $is-type-of: is-map($value);
    } @else if ($type == "list") {
        $is-type-of: is-list($value);
    } @else if ($type == "function") {
        $is-type-of: is-function($value);
    } @else if ($type == "callable") {
        $is-type-of: is-callable($value);
    } @else if ($type == "constructor") {
        $is-type-of: is-constructor($value);
    } @else if(is-constructor($type)) {
        $is-type-of: instance-of--($value, $type);
    } @else if (instance-of--($type, global(type))) {
        $is-type-of: is-valid--(map-get($type, validator), $value);
    } @else if (is-map($type)) {
        $is-type-of: --is-type-of--is-map($type, $value);
    } @else if (is-list($type)) {
        $is-type-of: --is-type-of--is-list($type, $value);
    } @else {
        $is-type-of: type-of($value) == inspect($type);
    }

    @return $is-type-of;
}