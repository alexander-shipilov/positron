@import "../types/is-function";
@import "../types/is-list";
@import "../core/@void";
@import "../core/throw";
@import "../core/try-catch";
@import "../core/value-of";
@import "../func/func-check-args";
@import "../func/func-to-string";
@import "../list/list-join-with";
@import "../list/list-map";
@import "../list/list-slice";
@import "../string/str-replace";
@import "$assert-debug";

@function --assert-func($assertion) {
    $assert: assert;
    $args: ();

    @if (is-list($assertion) and length($assertion) > 1) {
        $assert: "#{ $assert }-#{ nth($assertion, 2) }";

        @if (not is-function($assert)) {
            @return null;
        }

        $args: list-slice($assertion, 3);
        $assertion: nth($assertion, 1);
    }

    @return join(($assert, $assertion), $args);
}

@function --assert-format($assertion) {
    $expression: nth($assertion, 1);

    @if (is-list($assertion) and length($assertion) > 1) {
        $type: nth($assertion, 2);
        $args: list-slice($assertion, 3);

        @if ($type == 'throws' or $type == 'does-not-throw') {
            $expression: "`#{ func-to-string($expression) }`";
        }

        $expression: "#{ to-string($expression) } #{ str-replace($type, '-', ' ') }";

        @if (length($args) != 0) {
            $expression: "#{ $expression } #{ list-join-with(list-map($args, to-string), " " ) }"
        }
    }

    @return $expression;
}

/// Assert
/// @group assert
///
/// @param {string} $message
/// @param {list} $assertions
///
/// @examples
///
///     @include assert("my check", (
///         2 + 2 == 4,
///         foo equal foo,
///         (throw MyError) throws,
///         (throw MyError) throws MyError,
///     ));
///
@mixin assert($message, $assertions, $other...) {
    $valid-args: func-check-args("@assert", (message: string $message, assertions: list $assertions));

    @if ($valid-args) {
        $length: length($assertions);
        $debug: ("");
        $errors: ();

        $debug: join($debug, ("", "Assertion `#{ $message}` (#{ $length }):", ""));

        @for $index from 1 through $length {
            $assertion: nth($assertions, $index);
            $assert: --assert-func($assertion);

            $error: if($assert == null, "TypeError: Invalid assertion", try-catch(--assert-func($assertion)));

            $debug: append($debug, "    #{ if($error == null, "✔", "✖") } #{ $index }: #{ --assert-format($assertion) }");

            @if ($error != null) {
                $errors: append($errors, $error);
            }
        }

        $debug: append($debug, "");

        @if ($assert-debug) {
            @debug list-join-with($debug, "\000A");
        }

        @if (length($errors) != 0) {
            @each $error in $errors {
                @warn $error;
            }

            @error ();
        }
    }
}
