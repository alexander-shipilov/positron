@import "scss/constants/material-colors";
@import "scss/mixins";
@import "scss/func";

$input: ".input";

$input_appearance: (
    font-size: 14px,
    font-family: ("Roboto", sans-serif),
    font-style: normal,
    font-variant: normal,
    line-height: 36px,
    padding-left: 8px,
    padding-top: 0,
    padding-right: 8px,
    padding-bottom: 0,
    padding-horizontal: 8px,
    padding-vertical: 0,
    color: $material-grey-800,
    background-color: $material-white,
    border-color: $material-grey-300,
    border-style: solid,
    border-width: 1px,
    border-radius: 0,
    selection-color: color,
    selection-background-color: $material-grey-200,
    placeholder-color: $material-grey-400,
) !default;

$input-disabled-appearance: map_merge($input-appearance, (
    color: $material-grey-400,
    background-color: $material-grey-100,
    border-color: $material-grey-200
)) !default;

$input-error-appearance: map_merge($input-appearance, (
    color: $material-red-900,
    background-color: $material-red-50,
    border-color: $material-red-900
)) !default;

$input-focus-appearance: map_merge($input-appearance, (
    color: $material-black,
    border-color: $material-grey-500
)) !default;

$input-read-only-appearance: map_merge($input-appearance, (
    color: $material-grey-600,
    border-color: $material-grey-400
)) !default;

@function init-input-appearances($appearance, $disabled-appearance, $error-appearance,
    $focus-appearance, $read-only-appearance) {

    @return (
        "": $appearance,
        $input + "_read-only": $read-only-appearance,
        $input + "_focus": $focus-appearance,
        $input + "_error": $error-appearance,
        $input + "_disabled": $disabled-appearance,
    );
}

$input-appearances: init-input-appearances(
        $input-appearance,
        $input-disabled-appearance,
        $input-error-appearance,
        $input-focus-appearance,
        $input-read-only-appearance
);

@function input-appearance($appearances: $input-appearances) {
    @return get-appearance($appearances);
}

@function input-appearance-prop($prop, $appearances: $input-appearances) {
    @return get-appearance-prop($prop, $appearances);
}

@mixin input-at-root($selector) {
    @include at-root($selector) {
        @content;
    }
}

@mixin input {
    @include input-at-root("") {
        @content;
    }
}

@mixin input-disabled {
    @include input-at-root("#{ $input }_disabled #{ $input }_disabled.#{ $input }_error") {
        @content;
    }
}

@mixin input-error {
    @include input-at-root($input + "_error") {
        @content;
    }
}

@mixin input-focus {
    @include input-at-root($input + "_focus") {
        @content;
    }
}

@mixin input-read-only {
    @include input-at-root($input + "_read-only") {
        @content;
    }
}

@mixin input-for-each {
    @each $key in map_keys($input-appearances) {
        @include input-at-root($key) {
            @content;
        }
    }
}

@mixin input-for-some($states...) {
    @each $state in $states {
        $selectors: #{ modifier($input, $state) };

        @each $selector in $selectors {
            @if (map_has_key($input-appearances, $selector)) {
                @include input-at-root($selector) {
                    @content;
                }
            } @else {
                @warn "Invalid state " $state;
            }
        }
    }
}

@mixin input-typography($font-family: null, $font-size: null, $font-style: null,
    $font-variant: null, $line-height: null) {

    $appearance: input-appearance();

    @if ($appearance != null) {
        font-family: nvl($font-family, map_get($appearance, "font-family"));
        font-size: nvl($font-size, map_get($appearance, "font-size"));
        font-style: nvl($font-style, map_get($appearance, "font-style"));
        font-variant: nvl($font-variant, map_get($appearance, "font-variant"));
        line-height: nvl($line-height, map_get($appearance, "line-height"));
    } @else {
        @warn "[INPUT] input-typography: something wrong with " + #{ & };
    }
}

@mixin input-border($border-width: null, $border-style: null, $border-color: null, $border-radius: null) {
    $appearance: input-appearance();

    @if ($appearance != null) {
        @include border(
                nvl($border-width, map_get($appearance, "border-width")),
                nvl($border-style, map_get($appearance, "border-style")),
                nvl($border-color, map_get($appearance, "border-color")),
                nvl($border-radius, map_get($appearance, "border-radius"))
        );
    } @else {
        @warn "[INPUT] input-border: something wrong with " + #{ & };
    }
}

@mixin input-color($color: null, $background-color: null) {
    $appearance: input-appearance();

    @if ($appearance != null) {
        @include color(
                nvl($color, map_get($appearance, "color")),
                nvl($background-color, map_get($appearance, "background-color"))
        );
    } @else {
        @warn "[INPUT] input-color: something wrong with " + #{ & };
    }
}

@mixin input-padding($padding-left: null, $padding-top: null, $padding-right: null, $padding-bottom: null) {
    $appearance: input-appearance();

    @if ($appearance != null) {
        $padding-left: nvl($padding-left, map_get($appearance, "padding-left"));
        $padding-top: nvl($padding-top, map_get($appearance, "padding-top"));
        $padding-right: nvl($padding-right, map_get($appearance, "padding-right"));
        $padding-bottom: nvl($padding-bottom, map_get($appearance, "padding-bottom"));

        padding: $padding-top $padding-right $padding-bottom $padding-left;
    } @else {
        @warn "[INPUT] input-padding: something wrong with " + #{ & };
    }
}

@mixin input-state-borders() {
    @include input-for-each {
        @include input-border();
    }
}

@mixin input-state-colors() {
    @include input-for-each {
        @include input-color();
    }
}

@mixin input-selection-color {
    @include input-for-some("", "focus") {
        background: input-appearance-prop(selection-background-color);
    }
}

.input {
}