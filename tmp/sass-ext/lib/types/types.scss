@import "../list/--list-every";
@import "../func/call";

@import "../core/is-callable";
@import "../core/is-map";
@import "../core/throw";
@import "../core/throw-type-error";
@import "../core/to-bool";

/// Map of registered types
/// @group core-types
/// @access private
$--types: ();

/// Registers new type
/// @group core-types
/// @access private
///
/// @param {function} $validator
/// @return {map} $type
///
@function --type($type) {
    $type-id: unique-id();
    $--types: map-merge($--types, ($type-id: $type)) !global;

    @return $type-id;
}





/// List-of type
/// @group core-types
/// @access private
$--list-of: type();

/// Creates new typed List
/// @group core-types
///
/// @param {any} $type
/// @return {map}
///
/// @example
///     $type: list-of(string);
///
///     @debug instance-of((foo: bar), $type); // true
///     @debug instance-of((foo: 1), $type); // false
///     @debug instance-of(foo bar, $type); // false
@function list-of($type) {
    @return type($--list-of, $type);
}

/// Determines whether the passed type is a list-of type
/// @group core-types
///
/// @param {any} $type
/// @return {bool}
///
/// @example
///     $type: list-of(string);
///
///     @debug is-list-of($type); // true
@function is-list-of($type) {
    @return instance-of($type, $--list-of);
}



@function is-list-type($type) {
    @return is-list($type) and --list-every($type, is-type);
}

@function is-type($type, $other...) {
    @return is-string($type)
        or (is-list($type) and --list-every($type, is-type))
        or (is-map($type) and --map-every($type, is-type))
}