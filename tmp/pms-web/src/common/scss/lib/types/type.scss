@import "../func/call";
@import "./--type";
@import "./instance-of";
@import "./new";
@import "./optional";
@import "./value-of";

@import "../core/throw";

/// Map of registered types
/// @group core-types
/// @access private
$--types: ();

/// Registers new type
/// @group core-types
/// @access private
///
/// @param {function} $validator
/// @return {map} $type
///
@function --type($proto, $super-id: null) {
    $type-id: unique-id();

    $type-proto: ($type-id: $proto);
    @if ($super-id) {
        @if (not map-has-key($--types, $super-id)) {
            $error: throw("Invalid super");
        }

        $type-proto: map-merge(new($super-id, $proto), $type-proto);
    }

    $--types: map-merge($--types, ($type-id: $type-proto)) !global;

    @return $type-id;
}

$--type: --type();

/// Registers new type
/// @group core-types
///
/// @param {callable} $validator
/// @return {map} $type
///
/// @example
///
///     $my-type: type();
///     $my-instance = new($my-type);
///
///     @debug instance-of($my-instance, $my-type) // true
///
@function type($proto: null) {
    @return --type($proto, $--type);
}

/// Checks whether the passed value is a type
/// @group core-types
///
/// @param {any} $validator
/// @return {bool}
///
/// @example
///
///     $my-type: type();
///
///     @debug is-type(new($my-type), $my-type) // true
///
@function is-type($value) {
    @return instance-of($value, $--type);
}

/// Determines whether the passed value matches type checker
/// @group core-types
///
/// @param {type} $type
/// @param {any} $vale
/// @return {bool}
///
/// @example
///
///     $my-string-type: new(type(is-string));
///
///     @debug  // true
///
@function is-type-of($type, $value) {
    $type-check: null;

    @if (is-type($type)) {
        $value-of: value-of($type);
    }

    @return if($type-check != null, to-bool(func-call($type-check, $value)), true);
}